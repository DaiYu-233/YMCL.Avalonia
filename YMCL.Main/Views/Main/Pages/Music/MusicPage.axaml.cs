using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using System.Timers;
using Avalonia;
using Avalonia.Animation;
using Avalonia.Animation.Easings;
using Avalonia.Controls;
using Avalonia.Controls.Notifications;
using Avalonia.Input;
using Avalonia.Layout;
using Avalonia.Media;
using Avalonia.Platform.Storage;
using Avalonia.Threading;
using NAudio.Wave;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using YMCL.Main.Public;
using YMCL.Main.Public.Classes;
using YMCL.Main.Public.Controls.TaskManage;
using YMCL.Main.Public.Langs;
using static YMCL.Main.Public.Classes.PlaySongListViewItemEntry;
using Repeat = YMCL.Main.Public.Repeat;

namespace YMCL.Main.Views.Main.Pages.Music;

public partial class MusicPage : UserControl
{
    private readonly Method.Module.Debouncer _debouncer;
    private bool _firstLoad = true;
    private bool _isHoldingSlider;
    private bool _isPlaying;
    private Repeat _repeat;
    private PlaySongListViewItemEntry _selectedItem;
    private SolidColorBrush _solidColorBrush;
    private float _volume;
    private IWavePlayer _waveOut;
    private AudioFileReader _waveSource;
    private WaveStream _waveStream;
    public List<UrlImageDataListEntry> BitmapDataList = new();
    private string keyword = string.Empty;
    private List<TextBlock> lyricRuns;
    private List<Lyrics> lyrics;
    private int page;
    public List<PlaySongListViewItemEntry> playSongList = new();
    private Timer timer;
    private DispatcherTimer timerForLyric;

    public MusicPage()
    {
        InitializeComponent();
        BindingEvent();
        _debouncer = new Method.Module.Debouncer(async () =>
        {
            await Dispatcher.UIThread.InvokeAsync(() =>
            {
                if (_selectedItem == null) return;
                if (_selectedItem.Type == PlaySongListViewItemEntryType.Local)
                {
                    if (_waveSource == null) return;
                    _waveSource.CurrentTime = TimeSpan.FromMilliseconds(ControlPlayerSlider.Value);
                }
                else
                {
                    if (_waveStream == null) return;
                    _waveStream.CurrentTime = TimeSpan.FromMilliseconds(ControlPlayerSlider.Value);
                }
            });
        }, 10);
    }

    public void ExternalCall()
    {
        page = 0;
        keyword = SearchBox.Text;
        _ = SearchForListViewAsync(keyword!, page);
    }

    private void BindingEvent()
    {
        NextSongBtn.PointerPressed += async (_, _) => { NextSong(); };
        DeskLyricBtn.PointerPressed += (_, _) => { Const.Window.deskLyric.Toggle(); };
        PreviousSongBtn.PointerPressed += async (_, _) => { PreviousSong(); };
        RepeatBtn.PointerPressed += async (_, _) =>
        {
            switch (_repeat)
            {
                case Repeat.RepeatOff:
                    _repeat = Repeat.RepeatAll;
                    RepeatBtn.Path =
                        "F1 M 7.5 3.75 C 6.634114 3.75 5.82194 3.912762 5.063477 4.238281 C 4.305013 4.563803 3.642578 5.009766 3.076172 5.576172 C 2.509766 6.142578 2.063802 6.805014 1.738281 7.563477 C 1.41276 8.32194 1.25 9.134115 1.25 10 C 1.25 10.527344 1.318359 11.056315 1.455078 11.586914 C 1.591797 12.117514 1.79362 12.613933 2.060547 13.076172 C 2.099609 13.147787 2.150065 13.225912 2.211914 13.310547 C 2.273763 13.395183 2.333984 13.483073 2.392578 13.574219 C 2.451172 13.665365 2.501627 13.756511 2.543945 13.847656 C 2.586263 13.938803 2.607422 14.023438 2.607422 14.101562 C 2.607422 14.270834 2.545573 14.417318 2.421875 14.541016 C 2.298177 14.664714 2.151693 14.726562 1.982422 14.726562 C 1.871745 14.726562 1.778971 14.703776 1.704102 14.658203 C 1.629232 14.612631 1.55599 14.550781 1.484375 14.472656 C 1.24349 14.192709 1.030273 13.870443 0.844727 13.505859 C 0.65918 13.141276 0.504557 12.760417 0.380859 12.363281 C 0.257161 11.966146 0.16276 11.564128 0.097656 11.157227 C 0.032552 10.750326 0 10.364584 0 10 C 0 9.316406 0.089518 8.6556 0.268555 8.017578 C 0.447591 7.379558 0.69987 6.782227 1.025391 6.225586 C 1.350911 5.668945 1.741536 5.162761 2.197266 4.707031 C 2.652995 4.251303 3.157552 3.859051 3.710938 3.530273 C 4.264323 3.201498 4.861653 2.947592 5.50293 2.768555 C 6.144206 2.58952 6.809896 2.5 7.5 2.5 L 14.121094 2.5 L 12.685547 1.064453 C 12.561849 0.940756 12.5 0.794271 12.5 0.625 C 12.5 0.45573 12.561849 0.309246 12.685547 0.185547 C 12.809244 0.06185 12.955729 0 13.125 0 C 13.294271 0 13.440755 0.06185 13.564453 0.185547 L 16.064453 2.685547 C 16.18815 2.809246 16.25 2.95573 16.25 3.125 C 16.25 3.294271 16.18815 3.440756 16.064453 3.564453 L 13.564453 6.064453 C 13.440755 6.188151 13.294271 6.25 13.125 6.25 C 12.955729 6.25 12.809244 6.188151 12.685547 6.064453 C 12.561849 5.940756 12.5 5.794271 12.5 5.625 C 12.5 5.455729 12.561849 5.309245 12.685547 5.185547 L 14.121094 3.75 Z M 20 10 C 20 10.690104 19.91048 11.352539 19.731445 11.987305 C 19.552408 12.62207 19.300129 13.217773 18.974609 13.774414 C 18.649088 14.331055 18.258463 14.83724 17.802734 15.292969 C 17.347004 15.748698 16.842447 16.140951 16.289062 16.469727 C 15.735677 16.798502 15.138346 17.052408 14.49707 17.231445 C 13.855793 17.410482 13.190104 17.5 12.5 17.5 L 5.888672 17.5 L 7.314453 18.935547 C 7.43815 19.059244 7.5 19.205729 7.5 19.375 C 7.5 19.544271 7.43815 19.690756 7.314453 19.814453 C 7.190755 19.93815 7.044271 20 6.875 20 C 6.705729 20 6.559244 19.93815 6.435547 19.814453 L 3.935547 17.314453 C 3.811849 17.190756 3.75 17.044271 3.75 16.875 C 3.75 16.705729 3.811849 16.559244 3.935547 16.435547 L 6.435547 13.935547 C 6.559244 13.81185 6.705729 13.75 6.875 13.75 C 7.044271 13.75 7.190755 13.81185 7.314453 13.935547 C 7.43815 14.059245 7.5 14.205729 7.5 14.375 C 7.5 14.544271 7.43815 14.690756 7.314453 14.814453 L 5.888672 16.25 L 12.5 16.25 C 13.365885 16.25 14.178059 16.08724 14.936523 15.761719 C 15.694986 15.436198 16.357422 14.990234 16.923828 14.423828 C 17.490234 13.857422 17.936197 13.194987 18.261719 12.436523 C 18.587238 11.678061 18.75 10.865886 18.75 10 C 18.75 9.628906 18.723957 9.283854 18.671875 8.964844 C 18.619791 8.645834 18.541666 8.336589 18.4375 8.037109 C 18.333332 7.737631 18.204752 7.444662 18.051758 7.158203 C 17.898762 6.871746 17.721354 6.575521 17.519531 6.269531 C 17.473957 6.197917 17.441406 6.139323 17.421875 6.09375 C 17.402344 6.048178 17.392578 5.983074 17.392578 5.898438 C 17.392578 5.729168 17.452799 5.581056 17.573242 5.454102 C 17.693684 5.327149 17.841797 5.263673 18.017578 5.263672 C 18.128254 5.263673 18.221027 5.286459 18.295898 5.332031 C 18.370768 5.377604 18.44401 5.439453 18.515625 5.517578 C 18.75651 5.797527 18.969727 6.119793 19.155273 6.484375 C 19.34082 6.848959 19.495441 7.231445 19.619141 7.631836 C 19.742838 8.032227 19.837238 8.435873 19.902344 8.842773 C 19.967447 9.249675 20 9.635417 20 10 Z ";
                    break;
                case Repeat.RepeatAll:
                    _repeat = Repeat.RepeatOne;
                    RepeatBtn.Path =
                        "F1 M 7.5 3.75 C 6.634114 3.75 5.82194 3.912762 5.063477 4.238281 C 4.305013 4.563803 3.642578 5.009766 3.076172 5.576172 C 2.509766 6.142578 2.063802 6.805014 1.738281 7.563477 C 1.41276 8.32194 1.25 9.134115 1.25 10 C 1.25 10.384115 1.277669 10.73405 1.333008 11.049805 C 1.388346 11.365561 1.468099 11.669922 1.572266 11.962891 C 1.676432 12.255859 1.806641 12.543945 1.962891 12.827148 C 2.119141 13.110352 2.294922 13.411459 2.490234 13.730469 C 2.529297 13.795573 2.560221 13.855795 2.583008 13.911133 C 2.605794 13.966472 2.617188 14.029948 2.617188 14.101562 C 2.617188 14.270834 2.553711 14.417318 2.426758 14.541016 C 2.299805 14.664714 2.151693 14.726562 1.982422 14.726562 C 1.871745 14.726562 1.778971 14.703776 1.704102 14.658203 C 1.629232 14.612631 1.55599 14.550781 1.484375 14.472656 C 1.25 14.199219 1.040039 13.880209 0.854492 13.515625 C 0.668945 13.151042 0.512695 12.766928 0.385742 12.363281 C 0.258789 11.959636 0.16276 11.552734 0.097656 11.142578 C 0.032552 10.732422 0 10.351562 0 10 C 0 8.990886 0.188802 8.032227 0.566406 7.124023 C 0.94401 6.215821 1.48763 5.406902 2.197266 4.697266 C 2.906901 3.987631 3.71582 3.444012 4.624023 3.066406 C 5.532227 2.688803 6.490885 2.5 7.5 2.5 L 14.121094 2.5 L 12.685547 1.064453 C 12.561849 0.940756 12.5 0.794271 12.5 0.625 C 12.5 0.45573 12.561849 0.309246 12.685547 0.185547 C 12.809244 0.06185 12.955729 0 13.125 0 C 13.294271 0 13.440755 0.06185 13.564453 0.185547 L 16.064453 2.685547 C 16.18815 2.809246 16.25 2.95573 16.25 3.125 C 16.25 3.294271 16.18815 3.440756 16.064453 3.564453 L 13.564453 6.064453 C 13.440755 6.188151 13.294271 6.25 13.125 6.25 C 12.955729 6.25 12.809244 6.188151 12.685547 6.064453 C 12.561849 5.940756 12.5 5.794271 12.5 5.625 C 12.5 5.455729 12.561849 5.309245 12.685547 5.185547 L 14.121094 3.75 Z M 17.392578 5.898438 C 17.392578 5.729168 17.452799 5.581056 17.573242 5.454102 C 17.693684 5.327149 17.841797 5.263673 18.017578 5.263672 C 18.128254 5.263673 18.221027 5.286459 18.295898 5.332031 C 18.370768 5.377604 18.44401 5.439453 18.515625 5.517578 C 18.75 5.784506 18.958332 6.097006 19.140625 6.455078 C 19.322916 6.813152 19.47591 7.189129 19.599609 7.583008 C 19.723307 7.976889 19.819336 8.374023 19.887695 8.774414 C 19.956055 9.174805 19.993488 9.550781 20 9.902344 C 19.791666 9.648438 19.570312 9.405925 19.335938 9.174805 C 19.101562 8.943686 18.85091 8.733725 18.583984 8.544922 C 18.479816 8.115235 18.334961 7.721355 18.149414 7.363281 C 17.963867 7.005209 17.753906 6.640625 17.519531 6.269531 C 17.473957 6.197917 17.441406 6.139323 17.421875 6.09375 C 17.402344 6.048178 17.392578 5.983074 17.392578 5.898438 Z M 20 14.375 C 20 15.14974 19.851887 15.878906 19.555664 16.5625 C 19.259439 17.246094 18.857422 17.841797 18.349609 18.349609 C 17.841797 18.857422 17.246094 19.259439 16.5625 19.555664 C 15.878906 19.851889 15.149739 20 14.375 20 C 13.59375 20 12.861328 19.853516 12.177734 19.560547 C 11.494141 19.267578 10.898438 18.867188 10.390625 18.359375 C 9.882812 17.851562 9.482422 17.255859 9.189453 16.572266 C 8.896484 15.888672 8.75 15.15625 8.75 14.375 C 8.75 13.600261 8.898111 12.871094 9.194336 12.1875 C 9.49056 11.503906 9.892578 10.908203 10.400391 10.400391 C 10.908203 9.892578 11.503906 9.490561 12.1875 9.194336 C 12.871093 8.898112 13.60026 8.75 14.375 8.75 C 14.889322 8.75 15.385741 8.816732 15.864258 8.950195 C 16.342773 9.083659 16.790363 9.272461 17.207031 9.516602 C 17.623697 9.760742 18.004557 10.055339 18.349609 10.400391 C 18.69466 10.745443 18.989258 11.126303 19.233398 11.542969 C 19.477539 11.959636 19.66634 12.407227 19.799805 12.885742 C 19.933268 13.364258 20 13.860678 20 14.375 Z M 15 11.875 C 14.999999 11.705729 14.93815 11.559245 14.814453 11.435547 C 14.690755 11.31185 14.544271 11.25 14.375 11.25 C 14.205729 11.25 14.059244 11.31185 13.935547 11.435547 L 12.685547 12.685547 C 12.561849 12.809245 12.5 12.955729 12.5 13.125 C 12.5 13.294271 12.561849 13.440756 12.685547 13.564453 C 12.809244 13.688151 12.955729 13.75 13.125 13.75 C 13.268229 13.75 13.385416 13.712565 13.476562 13.637695 C 13.567708 13.562826 13.658854 13.479818 13.75 13.388672 L 13.75 16.875 C 13.75 17.044271 13.811849 17.190756 13.935547 17.314453 C 14.059244 17.43815 14.205729 17.5 14.375 17.5 C 14.544271 17.5 14.690755 17.43815 14.814453 17.314453 C 14.93815 17.190756 14.999999 17.044271 15 16.875 Z M 7.431641 16.25 C 7.548828 16.686197 7.705078 17.102865 7.900391 17.5 L 5.888672 17.5 L 7.314453 18.935547 C 7.43815 19.059244 7.5 19.205729 7.5 19.375 C 7.5 19.544271 7.43815 19.690756 7.314453 19.814453 C 7.190755 19.93815 7.044271 20 6.875 20 C 6.705729 20 6.559244 19.93815 6.435547 19.814453 L 3.935547 17.314453 C 3.811849 17.190756 3.75 17.044271 3.75 16.875 C 3.75 16.705729 3.811849 16.559244 3.935547 16.435547 L 6.435547 13.935547 C 6.559244 13.81185 6.705729 13.75 6.875 13.75 C 7.005208 13.75 7.115885 13.782553 7.207031 13.847656 C 7.200521 13.938803 7.195638 14.02832 7.192383 14.116211 C 7.189127 14.204102 7.1875 14.29362 7.1875 14.384766 C 7.1875 14.475912 7.189127 14.56543 7.192383 14.65332 C 7.195638 14.741211 7.200521 14.830729 7.207031 14.921875 L 5.888672 16.25 Z ";
                    break;
                default:
                    _repeat = Repeat.RepeatOff;
                    RepeatBtn.Path =
                        "F1 M 20 19.375 C 20 19.544271 19.93815 19.690756 19.814453 19.814453 C 19.690754 19.93815 19.54427 20 19.375 20 C 19.205729 20 19.059244 19.93815 18.935547 19.814453 L 0.185547 1.064453 C 0.061849 0.940756 0 0.794271 0 0.625 C 0 0.45573 0.061849 0.309246 0.185547 0.185547 C 0.309245 0.06185 0.455729 0 0.625 0 C 0.794271 0 0.940755 0.06185 1.064453 0.185547 L 19.814453 18.935547 C 19.93815 19.059244 20 19.205729 20 19.375 Z M 7.5 3.75 C 7.330729 3.75 7.161458 3.756512 6.992188 3.769531 C 6.822916 3.782553 6.653646 3.802084 6.484375 3.828125 L 5.439453 2.792969 C 6.103516 2.597656 6.790364 2.5 7.5 2.5 L 14.121094 2.5 L 12.685547 1.064453 C 12.561849 0.940756 12.5 0.794271 12.5 0.625 C 12.5 0.45573 12.561849 0.309246 12.685547 0.185547 C 12.809244 0.06185 12.955729 0 13.125 0 C 13.294271 0 13.440755 0.06185 13.564453 0.185547 L 16.064453 2.685547 C 16.18815 2.809246 16.25 2.95573 16.25 3.125 C 16.25 3.294271 16.18815 3.440756 16.064453 3.564453 L 13.564453 6.064453 C 13.440755 6.188151 13.294271 6.25 13.125 6.25 C 12.955729 6.25 12.809244 6.188151 12.685547 6.064453 C 12.561849 5.940756 12.5 5.794271 12.5 5.625 C 12.5 5.455729 12.561849 5.309245 12.685547 5.185547 L 14.121094 3.75 Z M 3.066406 3.955078 L 3.964844 4.84375 C 3.535156 5.130209 3.152669 5.463867 2.817383 5.844727 C 2.482096 6.225586 2.198893 6.63737 1.967773 7.080078 C 1.736654 7.522787 1.559245 7.991537 1.435547 8.486328 C 1.311849 8.98112 1.25 9.485678 1.25 10 C 1.25 10.709636 1.355794 11.363933 1.567383 11.962891 C 1.778971 12.56185 2.083333 13.151042 2.480469 13.730469 C 2.526042 13.795573 2.558594 13.852539 2.578125 13.901367 C 2.597656 13.950195 2.607422 14.016928 2.607422 14.101562 C 2.607422 14.270834 2.545573 14.418945 2.421875 14.545898 C 2.298177 14.672852 2.151693 14.736328 1.982422 14.736328 C 1.871745 14.736328 1.778971 14.713542 1.704102 14.667969 C 1.629232 14.622396 1.55599 14.560547 1.484375 14.482422 C 1.39974 14.391276 1.323242 14.287109 1.254883 14.169922 C 1.186523 14.052734 1.119792 13.942058 1.054688 13.837891 C 0.703125 13.251953 0.439453 12.635092 0.263672 11.987305 C 0.087891 11.339519 0 10.677084 0 10 C 0 8.769531 0.268555 7.638347 0.805664 6.606445 C 1.342773 5.574545 2.096354 4.690756 3.066406 3.955078 Z M 16.992188 14.345703 C 17.552082 13.759766 17.985025 13.092448 18.291016 12.34375 C 18.597004 11.595053 18.75 10.813803 18.75 10 C 18.75 9.290365 18.644205 8.636068 18.432617 8.037109 C 18.221027 7.438152 17.916666 6.848959 17.519531 6.269531 C 17.473957 6.204428 17.441406 6.147462 17.421875 6.098633 C 17.402344 6.049806 17.392578 5.983074 17.392578 5.898438 C 17.392578 5.729168 17.454426 5.581056 17.578125 5.454102 C 17.701822 5.327149 17.848307 5.263673 18.017578 5.263672 C 18.128254 5.263673 18.221027 5.286459 18.295898 5.332031 C 18.370768 5.377604 18.44401 5.439453 18.515625 5.517578 C 18.587238 5.602215 18.655598 5.694988 18.720703 5.795898 C 18.785807 5.896811 18.847656 5.996094 18.90625 6.09375 C 19.264322 6.686198 19.536133 7.312826 19.72168 7.973633 C 19.907227 8.63444 20 9.309896 20 10 C 20 10.976562 19.817707 11.91569 19.453125 12.817383 C 19.088541 13.719076 18.564453 14.521484 17.880859 15.224609 Z M 5.888672 16.25 L 12.5 16.25 C 13.320312 16.25 14.117838 16.090496 14.892578 15.771484 L 15.830078 16.71875 C 15.309244 16.972656 14.770508 17.166342 14.213867 17.299805 C 13.657227 17.433268 13.085938 17.5 12.5 17.5 L 5.888672 17.5 L 7.314453 18.935547 C 7.43815 19.059244 7.5 19.205729 7.5 19.375 C 7.5 19.544271 7.43815 19.690756 7.314453 19.814453 C 7.190755 19.93815 7.044271 20 6.875 20 C 6.705729 20 6.559244 19.93815 6.435547 19.814453 L 3.935547 17.314453 C 3.811849 17.190756 3.75 17.044271 3.75 16.875 C 3.75 16.705729 3.811849 16.559244 3.935547 16.435547 L 6.435547 13.935547 C 6.559244 13.81185 6.705729 13.75 6.875 13.75 C 7.044271 13.75 7.190755 13.81185 7.314453 13.935547 C 7.43815 14.059245 7.5 14.205729 7.5 14.375 C 7.5 14.544271 7.43815 14.690756 7.314453 14.814453 Z ";
                    break;
            }

            var setting = Const.Data.Setting;
            setting.Repeat = _repeat;
            File.WriteAllText(Const.String.SettingDataPath, JsonConvert.SerializeObject(setting, Formatting.Indented));
            RepeatBtn.Reload();
        };
        var _isOpenLyric = false;
        LyricBtn.PointerPressed += async (_, _) =>
        {
            if (_isOpenLyric)
            {
                _isOpenLyric = false;
                SearchRoot.IsVisible = true;
                SearchRoot.Opacity = (double)Application.Current.Resources["Opacity"]!;
                LyricRoot.Opacity = 0;
                await Task.Delay(260);
                LyricRoot.IsVisible = false;
            }
            else
            {
                _isOpenLyric = true;
                LyricRoot.IsVisible = true;
                LyricRoot.Opacity = (double)Application.Current.Resources["Opacity"]!;
                SearchRoot.Opacity = 0;
                await Task.Delay(260);
                SearchRoot.IsVisible = false;
            }
        };
        ControlPlayerSlider.ValueChanged += (_, _) =>
        {
            _debouncer.Trigger();
            PlayerSlider.Value = ControlPlayerSlider.Value;
            CurrentTimeText.Text = Method.Value.MsToTime(PlayerSlider.Value);
        };
        DownloadBtn.PointerPressed += async (_, _) =>
        {
            if (_selectedItem == null) return;
            var path = await Method.IO.SaveFilePicker(TopLevel.GetTopLevel(this)!,
                new FilePickerSaveOptions
                {
                    Title = MainLang.SaveAudioFile,
                    SuggestedFileName = $"{_selectedItem.SongName}.mp3",
                    DefaultExtension = "mp3"
                });
            if (string.IsNullOrWhiteSpace(path)) return;
            if (_selectedItem.Type == PlaySongListViewItemEntryType.Local)
            {
                try
                {
                    Method.Ui.Toast($"{MainLang.BeginDownload}: {_selectedItem.SongName}.mp3");
                    File.Copy(_selectedItem.Path, path);
                    Method.Ui.Toast($"{MainLang.DownloadFinish}: {_selectedItem.SongName}.mp3");
                }
                catch
                {
                    Method.Ui.Toast($"{MainLang.DownloadFail}: {_selectedItem.SongName}.mp3");
                }
            }
            else
            {
                var task = new TaskManager.TaskEntry($"{MainLang.Download} - {_selectedItem.SongName}.mp3", true,
                    false);
                Method.Ui.Toast($"{MainLang.BeginDownload}: {_selectedItem.SongName}.mp3");
                try
                {
                    using var client = new HttpClient();
                    var response =
                        await client.GetAsync($"{Const.String.MusicApiUrl.TrimEnd('/')}/song/url?id={_selectedItem.SongId}");
                    response.EnsureSuccessStatusCode();
                    var jObject1 = JObject.Parse(await response.Content.ReadAsStringAsync());
                    if (jObject1 == null)
                    {
                        Method.Ui.Toast(MainLang.MusicGetFail, type: NotificationType.Error);
                        return;
                    }

                    var url = (string)((JObject)((JArray)jObject1["data"])[0])["url"];
                    using var client1 = new HttpClient();
                    using var response1 =
                        await client1.GetAsync(url, HttpCompletionOption.ResponseHeadersRead);
                    response1.EnsureSuccessStatusCode();
                    var totalBytes = response1.Content.Headers.ContentLength.GetValueOrDefault();
                    await using Stream contentStream = await response1.Content.ReadAsStreamAsync(),
                        fileStream = new FileStream(path, FileMode.Create, FileAccess.Write, FileShare.None,
                            8192, true);
                    long totalBytesRead = 0;
                    var buffer = new byte[8192];
                    int bytesRead;
                    while ((bytesRead = await contentStream.ReadAsync(buffer, 0, buffer.Length)) != 0)
                    {
                        await fileStream.WriteAsync(buffer, 0, bytesRead);
                        totalBytesRead += bytesRead;
                        var progressPercentage = (double)totalBytesRead / totalBytes * 100;
                        task.UpdateValueProgress(progressPercentage);
                    }

                    Method.Ui.Toast($"{MainLang.DownloadFinish}: {_selectedItem.SongName}.mp3");
                    task.Destory();
                }
                catch
                {
                    Method.Ui.Toast($"{MainLang.DownloadFail}: {_selectedItem.SongName}.mp3");
                    task.Destory();
                }
            }
        };
        VolumeBtn.PointerPressed += (_, _) =>
        {
            if (VolumeRoot.Opacity == 0)
                VolumeRoot.Opacity = (double)Application.Current.Resources["Opacity"]!;
            else
                VolumeRoot.Opacity = 0;
        };
        VolumeSlider.ValueChanged += (_, _) =>
        {
            VolumeText.Text = Math.Round(VolumeSlider.Value).ToString();
            _volume = (float)VolumeSlider.Value / 100;
            if (_waveOut != null) _waveOut.Volume = (float)VolumeSlider.Value / 100;

            var setting = Const.Data.Setting;
            if (VolumeSlider.Value == setting.Volume) return;
            setting.Volume = VolumeSlider.Value;
            File.WriteAllText(Const.String.SettingDataPath, JsonConvert.SerializeObject(setting, Formatting.Indented));
        };
        Loaded += (s, e) =>
        {
            Method.Ui.PageLoadAnimation((-50, 0, 50, 0), (0, 0, 0, 0), TimeSpan.FromSeconds(0.45), Root, true);
            if (_firstLoad)
            {
                _firstLoad = false;
                if (Const.Data.Platform != Platform.Windows)
                {
                    Method.Ui.Toast(MainLang.MusicPlayerOnlySupportWindows, type: NotificationType.Error);
                }

                var list = JsonConvert.DeserializeObject<List<PlaySongListViewItemEntry>>(
                    File.ReadAllText(Const.String.PlayerDataPath));
                list.ForEach(list =>
                {
                    playSongList.Add(list);
                    PlayListView.Items.Add(list);
                });

                timer = new Timer(300);
                timer.Elapsed += OnTimedEvent;
                timer.AutoReset = true;
                timer.Enabled = true;

                var setting = Const.Data.Setting;
                _solidColorBrush = setting.Theme == Public.Theme.Light
                    ? new SolidColorBrush(Color.FromArgb((byte)(255 * 0.3), 0x33, 0x33, 0x33))
                    : new SolidColorBrush(Color.FromArgb((byte)(255 * 0.3), 255, 255, 255));

                VolumeSlider.Value = setting.Volume;
                _volume = (float)VolumeSlider.Value / 100;
                VolumeText.Text = Math.Round(VolumeSlider.Value).ToString();

                switch (setting.Repeat)
                {
                    case Repeat.RepeatOff:
                        _repeat = Repeat.RepeatOff;
                        RepeatBtn.Path =
                            "F1 M 20 19.375 C 20 19.544271 19.93815 19.690756 19.814453 19.814453 C 19.690754 19.93815 19.54427 20 19.375 20 C 19.205729 20 19.059244 19.93815 18.935547 19.814453 L 0.185547 1.064453 C 0.061849 0.940756 0 0.794271 0 0.625 C 0 0.45573 0.061849 0.309246 0.185547 0.185547 C 0.309245 0.06185 0.455729 0 0.625 0 C 0.794271 0 0.940755 0.06185 1.064453 0.185547 L 19.814453 18.935547 C 19.93815 19.059244 20 19.205729 20 19.375 Z M 7.5 3.75 C 7.330729 3.75 7.161458 3.756512 6.992188 3.769531 C 6.822916 3.782553 6.653646 3.802084 6.484375 3.828125 L 5.439453 2.792969 C 6.103516 2.597656 6.790364 2.5 7.5 2.5 L 14.121094 2.5 L 12.685547 1.064453 C 12.561849 0.940756 12.5 0.794271 12.5 0.625 C 12.5 0.45573 12.561849 0.309246 12.685547 0.185547 C 12.809244 0.06185 12.955729 0 13.125 0 C 13.294271 0 13.440755 0.06185 13.564453 0.185547 L 16.064453 2.685547 C 16.18815 2.809246 16.25 2.95573 16.25 3.125 C 16.25 3.294271 16.18815 3.440756 16.064453 3.564453 L 13.564453 6.064453 C 13.440755 6.188151 13.294271 6.25 13.125 6.25 C 12.955729 6.25 12.809244 6.188151 12.685547 6.064453 C 12.561849 5.940756 12.5 5.794271 12.5 5.625 C 12.5 5.455729 12.561849 5.309245 12.685547 5.185547 L 14.121094 3.75 Z M 3.066406 3.955078 L 3.964844 4.84375 C 3.535156 5.130209 3.152669 5.463867 2.817383 5.844727 C 2.482096 6.225586 2.198893 6.63737 1.967773 7.080078 C 1.736654 7.522787 1.559245 7.991537 1.435547 8.486328 C 1.311849 8.98112 1.25 9.485678 1.25 10 C 1.25 10.709636 1.355794 11.363933 1.567383 11.962891 C 1.778971 12.56185 2.083333 13.151042 2.480469 13.730469 C 2.526042 13.795573 2.558594 13.852539 2.578125 13.901367 C 2.597656 13.950195 2.607422 14.016928 2.607422 14.101562 C 2.607422 14.270834 2.545573 14.418945 2.421875 14.545898 C 2.298177 14.672852 2.151693 14.736328 1.982422 14.736328 C 1.871745 14.736328 1.778971 14.713542 1.704102 14.667969 C 1.629232 14.622396 1.55599 14.560547 1.484375 14.482422 C 1.39974 14.391276 1.323242 14.287109 1.254883 14.169922 C 1.186523 14.052734 1.119792 13.942058 1.054688 13.837891 C 0.703125 13.251953 0.439453 12.635092 0.263672 11.987305 C 0.087891 11.339519 0 10.677084 0 10 C 0 8.769531 0.268555 7.638347 0.805664 6.606445 C 1.342773 5.574545 2.096354 4.690756 3.066406 3.955078 Z M 16.992188 14.345703 C 17.552082 13.759766 17.985025 13.092448 18.291016 12.34375 C 18.597004 11.595053 18.75 10.813803 18.75 10 C 18.75 9.290365 18.644205 8.636068 18.432617 8.037109 C 18.221027 7.438152 17.916666 6.848959 17.519531 6.269531 C 17.473957 6.204428 17.441406 6.147462 17.421875 6.098633 C 17.402344 6.049806 17.392578 5.983074 17.392578 5.898438 C 17.392578 5.729168 17.454426 5.581056 17.578125 5.454102 C 17.701822 5.327149 17.848307 5.263673 18.017578 5.263672 C 18.128254 5.263673 18.221027 5.286459 18.295898 5.332031 C 18.370768 5.377604 18.44401 5.439453 18.515625 5.517578 C 18.587238 5.602215 18.655598 5.694988 18.720703 5.795898 C 18.785807 5.896811 18.847656 5.996094 18.90625 6.09375 C 19.264322 6.686198 19.536133 7.312826 19.72168 7.973633 C 19.907227 8.63444 20 9.309896 20 10 C 20 10.976562 19.817707 11.91569 19.453125 12.817383 C 19.088541 13.719076 18.564453 14.521484 17.880859 15.224609 Z M 5.888672 16.25 L 12.5 16.25 C 13.320312 16.25 14.117838 16.090496 14.892578 15.771484 L 15.830078 16.71875 C 15.309244 16.972656 14.770508 17.166342 14.213867 17.299805 C 13.657227 17.433268 13.085938 17.5 12.5 17.5 L 5.888672 17.5 L 7.314453 18.935547 C 7.43815 19.059244 7.5 19.205729 7.5 19.375 C 7.5 19.544271 7.43815 19.690756 7.314453 19.814453 C 7.190755 19.93815 7.044271 20 6.875 20 C 6.705729 20 6.559244 19.93815 6.435547 19.814453 L 3.935547 17.314453 C 3.811849 17.190756 3.75 17.044271 3.75 16.875 C 3.75 16.705729 3.811849 16.559244 3.935547 16.435547 L 6.435547 13.935547 C 6.559244 13.81185 6.705729 13.75 6.875 13.75 C 7.044271 13.75 7.190755 13.81185 7.314453 13.935547 C 7.43815 14.059245 7.5 14.205729 7.5 14.375 C 7.5 14.544271 7.43815 14.690756 7.314453 14.814453 Z ";
                        break;
                    case Repeat.RepeatOne:
                        _repeat = Repeat.RepeatOne;
                        RepeatBtn.Path =
                            "F1 M 7.5 3.75 C 6.634114 3.75 5.82194 3.912762 5.063477 4.238281 C 4.305013 4.563803 3.642578 5.009766 3.076172 5.576172 C 2.509766 6.142578 2.063802 6.805014 1.738281 7.563477 C 1.41276 8.32194 1.25 9.134115 1.25 10 C 1.25 10.384115 1.277669 10.73405 1.333008 11.049805 C 1.388346 11.365561 1.468099 11.669922 1.572266 11.962891 C 1.676432 12.255859 1.806641 12.543945 1.962891 12.827148 C 2.119141 13.110352 2.294922 13.411459 2.490234 13.730469 C 2.529297 13.795573 2.560221 13.855795 2.583008 13.911133 C 2.605794 13.966472 2.617188 14.029948 2.617188 14.101562 C 2.617188 14.270834 2.553711 14.417318 2.426758 14.541016 C 2.299805 14.664714 2.151693 14.726562 1.982422 14.726562 C 1.871745 14.726562 1.778971 14.703776 1.704102 14.658203 C 1.629232 14.612631 1.55599 14.550781 1.484375 14.472656 C 1.25 14.199219 1.040039 13.880209 0.854492 13.515625 C 0.668945 13.151042 0.512695 12.766928 0.385742 12.363281 C 0.258789 11.959636 0.16276 11.552734 0.097656 11.142578 C 0.032552 10.732422 0 10.351562 0 10 C 0 8.990886 0.188802 8.032227 0.566406 7.124023 C 0.94401 6.215821 1.48763 5.406902 2.197266 4.697266 C 2.906901 3.987631 3.71582 3.444012 4.624023 3.066406 C 5.532227 2.688803 6.490885 2.5 7.5 2.5 L 14.121094 2.5 L 12.685547 1.064453 C 12.561849 0.940756 12.5 0.794271 12.5 0.625 C 12.5 0.45573 12.561849 0.309246 12.685547 0.185547 C 12.809244 0.06185 12.955729 0 13.125 0 C 13.294271 0 13.440755 0.06185 13.564453 0.185547 L 16.064453 2.685547 C 16.18815 2.809246 16.25 2.95573 16.25 3.125 C 16.25 3.294271 16.18815 3.440756 16.064453 3.564453 L 13.564453 6.064453 C 13.440755 6.188151 13.294271 6.25 13.125 6.25 C 12.955729 6.25 12.809244 6.188151 12.685547 6.064453 C 12.561849 5.940756 12.5 5.794271 12.5 5.625 C 12.5 5.455729 12.561849 5.309245 12.685547 5.185547 L 14.121094 3.75 Z M 17.392578 5.898438 C 17.392578 5.729168 17.452799 5.581056 17.573242 5.454102 C 17.693684 5.327149 17.841797 5.263673 18.017578 5.263672 C 18.128254 5.263673 18.221027 5.286459 18.295898 5.332031 C 18.370768 5.377604 18.44401 5.439453 18.515625 5.517578 C 18.75 5.784506 18.958332 6.097006 19.140625 6.455078 C 19.322916 6.813152 19.47591 7.189129 19.599609 7.583008 C 19.723307 7.976889 19.819336 8.374023 19.887695 8.774414 C 19.956055 9.174805 19.993488 9.550781 20 9.902344 C 19.791666 9.648438 19.570312 9.405925 19.335938 9.174805 C 19.101562 8.943686 18.85091 8.733725 18.583984 8.544922 C 18.479816 8.115235 18.334961 7.721355 18.149414 7.363281 C 17.963867 7.005209 17.753906 6.640625 17.519531 6.269531 C 17.473957 6.197917 17.441406 6.139323 17.421875 6.09375 C 17.402344 6.048178 17.392578 5.983074 17.392578 5.898438 Z M 20 14.375 C 20 15.14974 19.851887 15.878906 19.555664 16.5625 C 19.259439 17.246094 18.857422 17.841797 18.349609 18.349609 C 17.841797 18.857422 17.246094 19.259439 16.5625 19.555664 C 15.878906 19.851889 15.149739 20 14.375 20 C 13.59375 20 12.861328 19.853516 12.177734 19.560547 C 11.494141 19.267578 10.898438 18.867188 10.390625 18.359375 C 9.882812 17.851562 9.482422 17.255859 9.189453 16.572266 C 8.896484 15.888672 8.75 15.15625 8.75 14.375 C 8.75 13.600261 8.898111 12.871094 9.194336 12.1875 C 9.49056 11.503906 9.892578 10.908203 10.400391 10.400391 C 10.908203 9.892578 11.503906 9.490561 12.1875 9.194336 C 12.871093 8.898112 13.60026 8.75 14.375 8.75 C 14.889322 8.75 15.385741 8.816732 15.864258 8.950195 C 16.342773 9.083659 16.790363 9.272461 17.207031 9.516602 C 17.623697 9.760742 18.004557 10.055339 18.349609 10.400391 C 18.69466 10.745443 18.989258 11.126303 19.233398 11.542969 C 19.477539 11.959636 19.66634 12.407227 19.799805 12.885742 C 19.933268 13.364258 20 13.860678 20 14.375 Z M 15 11.875 C 14.999999 11.705729 14.93815 11.559245 14.814453 11.435547 C 14.690755 11.31185 14.544271 11.25 14.375 11.25 C 14.205729 11.25 14.059244 11.31185 13.935547 11.435547 L 12.685547 12.685547 C 12.561849 12.809245 12.5 12.955729 12.5 13.125 C 12.5 13.294271 12.561849 13.440756 12.685547 13.564453 C 12.809244 13.688151 12.955729 13.75 13.125 13.75 C 13.268229 13.75 13.385416 13.712565 13.476562 13.637695 C 13.567708 13.562826 13.658854 13.479818 13.75 13.388672 L 13.75 16.875 C 13.75 17.044271 13.811849 17.190756 13.935547 17.314453 C 14.059244 17.43815 14.205729 17.5 14.375 17.5 C 14.544271 17.5 14.690755 17.43815 14.814453 17.314453 C 14.93815 17.190756 14.999999 17.044271 15 16.875 Z M 7.431641 16.25 C 7.548828 16.686197 7.705078 17.102865 7.900391 17.5 L 5.888672 17.5 L 7.314453 18.935547 C 7.43815 19.059244 7.5 19.205729 7.5 19.375 C 7.5 19.544271 7.43815 19.690756 7.314453 19.814453 C 7.190755 19.93815 7.044271 20 6.875 20 C 6.705729 20 6.559244 19.93815 6.435547 19.814453 L 3.935547 17.314453 C 3.811849 17.190756 3.75 17.044271 3.75 16.875 C 3.75 16.705729 3.811849 16.559244 3.935547 16.435547 L 6.435547 13.935547 C 6.559244 13.81185 6.705729 13.75 6.875 13.75 C 7.005208 13.75 7.115885 13.782553 7.207031 13.847656 C 7.200521 13.938803 7.195638 14.02832 7.192383 14.116211 C 7.189127 14.204102 7.1875 14.29362 7.1875 14.384766 C 7.1875 14.475912 7.189127 14.56543 7.192383 14.65332 C 7.195638 14.741211 7.200521 14.830729 7.207031 14.921875 L 5.888672 16.25 Z ";
                        break;
                    default:
                        _repeat = Repeat.RepeatAll;
                        RepeatBtn.Path =
                            "F1 M 7.5 3.75 C 6.634114 3.75 5.82194 3.912762 5.063477 4.238281 C 4.305013 4.563803 3.642578 5.009766 3.076172 5.576172 C 2.509766 6.142578 2.063802 6.805014 1.738281 7.563477 C 1.41276 8.32194 1.25 9.134115 1.25 10 C 1.25 10.527344 1.318359 11.056315 1.455078 11.586914 C 1.591797 12.117514 1.79362 12.613933 2.060547 13.076172 C 2.099609 13.147787 2.150065 13.225912 2.211914 13.310547 C 2.273763 13.395183 2.333984 13.483073 2.392578 13.574219 C 2.451172 13.665365 2.501627 13.756511 2.543945 13.847656 C 2.586263 13.938803 2.607422 14.023438 2.607422 14.101562 C 2.607422 14.270834 2.545573 14.417318 2.421875 14.541016 C 2.298177 14.664714 2.151693 14.726562 1.982422 14.726562 C 1.871745 14.726562 1.778971 14.703776 1.704102 14.658203 C 1.629232 14.612631 1.55599 14.550781 1.484375 14.472656 C 1.24349 14.192709 1.030273 13.870443 0.844727 13.505859 C 0.65918 13.141276 0.504557 12.760417 0.380859 12.363281 C 0.257161 11.966146 0.16276 11.564128 0.097656 11.157227 C 0.032552 10.750326 0 10.364584 0 10 C 0 9.316406 0.089518 8.6556 0.268555 8.017578 C 0.447591 7.379558 0.69987 6.782227 1.025391 6.225586 C 1.350911 5.668945 1.741536 5.162761 2.197266 4.707031 C 2.652995 4.251303 3.157552 3.859051 3.710938 3.530273 C 4.264323 3.201498 4.861653 2.947592 5.50293 2.768555 C 6.144206 2.58952 6.809896 2.5 7.5 2.5 L 14.121094 2.5 L 12.685547 1.064453 C 12.561849 0.940756 12.5 0.794271 12.5 0.625 C 12.5 0.45573 12.561849 0.309246 12.685547 0.185547 C 12.809244 0.06185 12.955729 0 13.125 0 C 13.294271 0 13.440755 0.06185 13.564453 0.185547 L 16.064453 2.685547 C 16.18815 2.809246 16.25 2.95573 16.25 3.125 C 16.25 3.294271 16.18815 3.440756 16.064453 3.564453 L 13.564453 6.064453 C 13.440755 6.188151 13.294271 6.25 13.125 6.25 C 12.955729 6.25 12.809244 6.188151 12.685547 6.064453 C 12.561849 5.940756 12.5 5.794271 12.5 5.625 C 12.5 5.455729 12.561849 5.309245 12.685547 5.185547 L 14.121094 3.75 Z M 20 10 C 20 10.690104 19.91048 11.352539 19.731445 11.987305 C 19.552408 12.62207 19.300129 13.217773 18.974609 13.774414 C 18.649088 14.331055 18.258463 14.83724 17.802734 15.292969 C 17.347004 15.748698 16.842447 16.140951 16.289062 16.469727 C 15.735677 16.798502 15.138346 17.052408 14.49707 17.231445 C 13.855793 17.410482 13.190104 17.5 12.5 17.5 L 5.888672 17.5 L 7.314453 18.935547 C 7.43815 19.059244 7.5 19.205729 7.5 19.375 C 7.5 19.544271 7.43815 19.690756 7.314453 19.814453 C 7.190755 19.93815 7.044271 20 6.875 20 C 6.705729 20 6.559244 19.93815 6.435547 19.814453 L 3.935547 17.314453 C 3.811849 17.190756 3.75 17.044271 3.75 16.875 C 3.75 16.705729 3.811849 16.559244 3.935547 16.435547 L 6.435547 13.935547 C 6.559244 13.81185 6.705729 13.75 6.875 13.75 C 7.044271 13.75 7.190755 13.81185 7.314453 13.935547 C 7.43815 14.059245 7.5 14.205729 7.5 14.375 C 7.5 14.544271 7.43815 14.690756 7.314453 14.814453 L 5.888672 16.25 L 12.5 16.25 C 13.365885 16.25 14.178059 16.08724 14.936523 15.761719 C 15.694986 15.436198 16.357422 14.990234 16.923828 14.423828 C 17.490234 13.857422 17.936197 13.194987 18.261719 12.436523 C 18.587238 11.678061 18.75 10.865886 18.75 10 C 18.75 9.628906 18.723957 9.283854 18.671875 8.964844 C 18.619791 8.645834 18.541666 8.336589 18.4375 8.037109 C 18.333332 7.737631 18.204752 7.444662 18.051758 7.158203 C 17.898762 6.871746 17.721354 6.575521 17.519531 6.269531 C 17.473957 6.197917 17.441406 6.139323 17.421875 6.09375 C 17.402344 6.048178 17.392578 5.983074 17.392578 5.898438 C 17.392578 5.729168 17.452799 5.581056 17.573242 5.454102 C 17.693684 5.327149 17.841797 5.263673 18.017578 5.263672 C 18.128254 5.263673 18.221027 5.286459 18.295898 5.332031 C 18.370768 5.377604 18.44401 5.439453 18.515625 5.517578 C 18.75651 5.797527 18.969727 6.119793 19.155273 6.484375 C 19.34082 6.848959 19.495441 7.231445 19.619141 7.631836 C 19.742838 8.032227 19.837238 8.435873 19.902344 8.842773 C 19.967447 9.249675 20 9.635417 20 10 Z ";
                        break;
                }

                LyricBlock.Children.Add(new TextBlock
                {
                    Text = MainLang.LyricTip + "\n",
                    Height = 22,
                    HorizontalAlignment = HorizontalAlignment.Center,
                    VerticalAlignment = VerticalAlignment.Center,
                    TextAlignment = TextAlignment.Center,
                    Foreground = _solidColorBrush
                });
            }
        };
        UpSong.Click += (s, e) =>
        {
            var index = PlayListView.SelectedIndex;
            var count = PlayListView.Items.Count;
            if (index == 0) return;
            var item = PlayListView.SelectedItem;
            if (item == null) return;
            PlayListView.Items.Remove(item);
            PlayListView.Items.Insert(index - 1, item);
            PlayListView.SelectedItem = item;
        };
        DownSong.Click += (s, e) =>
        {
            var index = PlayListView.SelectedIndex;
            var count = PlayListView.Items.Count;
            if (index == count - 1) return;
            var item = PlayListView.SelectedItem;
            if (item == null) return;
            PlayListView.Items.Remove(item);
            PlayListView.Items.Insert(index + 1, item);
            PlayListView.SelectedItem = item;
        };
        SearchBox.KeyDown += (s, e) =>
        {
            if (e.Key == Key.Enter)
            {
                page = 0;
                keyword = SearchBox.Text;
                _ = SearchForListViewAsync(keyword!, page);
            }
        };
        SearchBtn.Click += (s, e) =>
        {
            page = 0;
            keyword = SearchBox.Text;
            _ = SearchForListViewAsync(keyword!, page);
        };
        LoadMoreBtn.Click += (s, e) => { _ = LoadMoreAsync(); };
        SearchSongListView.SelectionChanged += async (_, _) =>
        {
            if (SearchSongListView.SelectedIndex == -1) return;
            var song = SearchSongListView.SelectedItem as SearchSongListViewItemEntry;
            if (song == null) return;
            PlayListView.Items.Add(new PlaySongListViewItemEntry
            {
                SongName = song.SongName,
                SongId = song.SongId,
                Authors = song.Authors,
                DisplayDuration = song.DisplayDuration,
                Duration = song.Duration,
                Img = song.Img,
                Path = null,
                Type = PlaySongListViewItemEntryType.Network
            });
            playSongList.Add(new PlaySongListViewItemEntry
            {
                SongName = song.SongName,
                SongId = song.SongId,
                Authors = song.Authors,
                DisplayDuration = song.DisplayDuration,
                Duration = song.Duration,
                Img = song.Img,
                Path = null,
                Type = PlaySongListViewItemEntryType.Network
            });
            PlayListView.SelectedIndex = PlayListView.Items.Count - 1;
            File.WriteAllText(Const.String.PlayerDataPath,
                JsonConvert.SerializeObject(playSongList, Formatting.Indented));
            await Task.Delay(250);
            SearchSongListView.SelectedIndex = -1;
        };
        DelSelectedSong.Click += (s, e) =>
        {
            if (PlayListView.Items.Count == 0 || PlayListView.SelectedIndex == -1) return;
            playSongList.RemoveAt(PlayListView.SelectedIndex);
            PlayListView.Items.RemoveAt(PlayListView.SelectedIndex);
            File.WriteAllText(Const.String.PlayerDataPath,
                JsonConvert.SerializeObject(playSongList, Formatting.Indented));
            PlayListView.SelectedIndex = PlayListView.Items.Count - 1;
        };
        var _theLastLocalSong = string.Empty;
        AddLocalSong.Click += async (s, e) =>
        {
            var files = await Method.IO.OpenFilePicker(TopLevel.GetTopLevel(this)!,
                new FilePickerOpenOptions { AllowMultiple = true, Title = MainLang.SelectMusicFile });
            if (files == null) return;
            foreach (var file in files)
            {
                if (_theLastLocalSong == file.Path) continue;
                _theLastLocalSong = file.Path;
                using (var reader = new MediaFoundationReader(file.Path))
                {
                    var time = Method.Value.MsToTime(reader.TotalTime.TotalMilliseconds);
                    var song = new PlaySongListViewItemEntry
                    {
                        DisplayDuration = time,
                        Duration = reader.TotalTime.TotalMilliseconds,
                        Img = null,
                        SongName = file.Name,
                        Authors = file.Extension.TrimStart('.'),
                        Path = file.Path,
                        Type = PlaySongListViewItemEntryType.Local
                    };
                    playSongList.Add(song);
                    PlayListView.Items.Add(song);
                }
            }

            File.WriteAllText(Const.String.PlayerDataPath,
                JsonConvert.SerializeObject(playSongList, Formatting.Indented));
            PlayListView.SelectedIndex = PlayListView.Items.Count - 1;
        };
        PlayBtn.PointerPressed += (s, e) =>
        {
            if (e.GetCurrentPoint(this).Properties.IsLeftButtonPressed)
            {
                if (_isPlaying)
                    PausePlaying();
                else
                    BeginPlaying();
            }
        };
        PlayListView.SelectionChanged += (s, e) =>
        {
            var song = (PlaySongListViewItemEntry)PlayListView.SelectedItem;
            if (song == null)
            {
                if (_waveOut == null) return;
                _waveOut.Stop();
                _waveOut.Dispose();
                Const.Window.deskLyric.LyricText.Text = MainLang.LyricTip;
                return;
            }

            if (lyrics != null) lyrics.Clear();

            LyricBlock.Children.Clear();
            LyricBlock.Children.Add(new TextBlock
            {
                Text = MainLang.LyricTip + "\n",
                Height = 22,
                HorizontalAlignment = HorizontalAlignment.Center,
                VerticalAlignment = VerticalAlignment.Center,
                TextAlignment = TextAlignment.Center,
                Foreground = _solidColorBrush
            });

            PlayerSlider.Value = 0;
            ControlPlayerSlider.Value = 0;
            CurrentTimeText.Text = "00:00";
            TotalTimeText.Text = "00:00";
            _selectedItem = song;
            if (song.Type == PlaySongListViewItemEntryType.Local) SongImg.Source = Img.Source;
            PlaySong(song!);
        };
    }

    private async void LoadingUi()
    {
        LoadingTip.IsVisible = true;
        Dispatcher.UIThread.Invoke(() => { LoadingTip.Margin = new Thickness(0, 0, 20, 80); });
        await Task.Delay(1100);
        Dispatcher.UIThread.Invoke(() => { LoadingTip.Opacity = 0; });
        await Task.Delay(210);
        LoadingTip.IsVisible = false;
        Dispatcher.UIThread.Invoke(() => { LoadingTip.Margin = new Thickness(0, 0, -230, 80); });
        Dispatcher.UIThread.Invoke(() => { LoadingTip.Opacity = (double)Application.Current.Resources["Opacity"]!; });
        await Task.Delay(210);
        LoadingTip.IsVisible = true;
    }

    private void OnTimedEvent(object? sender, ElapsedEventArgs e)
    {
        var slider = true;
        if (_selectedItem == null) return;
        try
        {
            if (_selectedItem.Type == PlaySongListViewItemEntryType.Local)
                Dispatcher.UIThread.Invoke(() =>
                {
                    if (_waveSource == null) return;
                    CurrentTimeText.Text = Method.Value.MsToTime(_waveSource.CurrentTime.TotalMilliseconds);
                    if (slider) PlayerSlider.Value = _waveSource.CurrentTime.TotalMilliseconds;
                });
            else if (_selectedItem.Type == PlaySongListViewItemEntryType.Network)
                Dispatcher.UIThread.Invoke(() =>
                {
                    if (_waveStream == null) return;
                    CurrentTimeText.Text = Method.Value.MsToTime(_waveStream.CurrentTime.TotalMilliseconds);
                    if (slider) PlayerSlider.Value = _waveStream.CurrentTime.TotalMilliseconds;
                });
        }
        catch
        {
        }
    }

    private void BeginPlaying()
    {
        _isPlaying = true;
        PauseIcon.IsVisible = false;
        PlayingIcon.IsVisible = true;
        try
        {
            _waveOut.Play();
        }
        catch
        {
        }
    }

    private void PausePlaying()
    {
        _isPlaying = false;
        PauseIcon.IsVisible = true;
        PlayingIcon.IsVisible = false;
        try
        {
            _waveOut.Pause();
        }
        catch
        {
        }
    }

    private async Task SearchForListViewAsync(string keyword, int page)
    {
        if (string.IsNullOrWhiteSpace(keyword)) return;
        LoadMoreBtn.IsVisible = false;
        Loading.IsVisible = true;
        SearchBtn.IsEnabled = false;
        SearchBox.IsEnabled = false;
        SearchSongListView.Items.Clear();
        using var client = new HttpClient();
        client.DefaultRequestHeaders.Add("User-Agent",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36 Edg/91.0.864.54");
        var json = string.Empty;
        try
        {
            var url = $"{Const.String.MusicApiUrl.TrimEnd('/')}/cloudsearch?keywords={keyword}&offset={page * 30}";
            var response = await client.GetAsync(url);
            response.EnsureSuccessStatusCode();
            json = await response.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {
            SearchBox.IsEnabled = true;
            SearchBtn.IsEnabled = true;
            Method.Ui.ShowShortException(MainLang.ErrorCallingApi, ex);
            Loading.IsVisible = false;
            return;
        }

        var obj = JsonConvert.DeserializeObject<SearchSongEntry.Root>(json);
        if (obj.code == 200)
        {
            if (obj.result.songCount > 0)
            {
                var songs = obj.result.songs.ToArray();
                foreach (var song in songs)
                {
                    var authors = string.Empty;
                    foreach (var author in song.ar) authors += $"{author.name} ";
                    SearchSongListView.Items.Add(new SearchSongListViewItemEntry
                    {
                        SongId = song.id,
                        SongName = song.name,
                        Authors = authors,
                        Img = song.al.picUrl,
                        Duration = song.dt,
                        DisplayDuration = Method.Value.MsToTime(Convert.ToInt32(song.dt))
                    });
                }
            }
            else
            {
                Method.Ui.Toast(MainLang.SearchNoResult);
            }
        }
        else
        {
            Method.Ui.Toast(MainLang.SearchNoResult, type: NotificationType.Error);
        }

        if (SearchSongListView.Items.Count > 0) LoadMoreBtn.IsVisible = true;
        SearchBox.IsEnabled = true;
        SearchBtn.IsEnabled = true;
        Loading.IsVisible = false;
    }

    private async Task LoadMoreAsync()
    {
        Loading.IsVisible = true;
        LoadMoreBtn.IsVisible = false;
        SongListViewScroll.ScrollToEnd();
        page++;
        SearchBox.IsEnabled = false;
        SearchBtn.IsEnabled = false;
        using var client = new HttpClient();
        client.DefaultRequestHeaders.Add("User-Agent",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36 Edg/91.0.864.54");
        var json = string.Empty;
        try
        {
            var url = $"{Const.String.MusicApiUrl.TrimEnd('/')}/cloudsearch?keywords={keyword}&offset={page * 30}";
            var response = await client.GetAsync(url);
            response.EnsureSuccessStatusCode();
            json = await response.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {
            SearchBox.IsEnabled = true;
            SearchBtn.IsEnabled = true;
            Loading.IsVisible = false;
            LoadMoreBtn.IsVisible = true;
            Method.Ui.ShowShortException(MainLang.ErrorCallingApi, ex);
            return;
        }

        var obj = JsonConvert.DeserializeObject<SearchSongEntry.Root>(json);
        if (obj.code == 200)
        {
            if (obj.result.songCount > 0)
            {
                var songs = obj.result.songs.ToArray();
                foreach (var song in songs)
                {
                    var authors = string.Empty;
                    foreach (var author in song.ar) authors += $"{author.name} ";
                    SearchSongListView.Items.Add(new SearchSongListViewItemEntry
                    {
                        SongId = song.id,
                        SongName = song.name,
                        Authors = authors,
                        Duration = song.dt,
                        Img = song.al.picUrl,
                        DisplayDuration = Method.Value.MsToTime(Convert.ToInt32(song.dt))
                    });
                }
            }
            else
            {
                Method.Ui.Toast(MainLang.SearchNoResult);
            }
        }
        else
        {
            Method.Ui.Toast(MainLang.SearchNoResult, type: NotificationType.Error);
        }

        if (SearchSongListView.Items.Count > 0) LoadMoreBtn.IsVisible = true;
        SearchBox.IsEnabled = true;
        SearchBtn.IsEnabled = true;
        Loading.IsVisible = false;
        LoadMoreBtn.IsVisible = true;
    }

    private async void PlaySong(PlaySongListViewItemEntry entry)
    {
        if (entry == null) return;
        SongName.Text = entry.SongName.Length > 30 ? $"{entry.SongName.Substring(0, 28)} ..." : entry.SongName;
        SongAuthors.Text = entry.Authors.Length > 30 ? $"{entry.Authors.Substring(0, 28)} ..." : entry.Authors;

        try
        {
            if (_waveOut != null)
            {
                _waveOut.Stop();
                _waveOut.Dispose();
            }
        }
        catch
        {
        }

        if (entry.Type == PlaySongListViewItemEntryType.Local)
        {
            if (entry.Path == null)
            {
                Method.Ui.Toast(MainLang.MusicGetFail, type: NotificationType.Error);
                return;
            }

            if (!File.Exists(entry.Path))
            {
                Method.Ui.Toast(MainLang.FileNotExist, type: NotificationType.Error);
                return;
            }

            if (_waveOut != null)
            {
                _waveOut.Stop();
                _waveOut.Dispose();
            }

            _waveOut = new WaveOutEvent();
            _waveOut.Volume = _volume;
            _waveOut.PlaybackStopped += PlayerEnded;
            _waveSource = new AudioFileReader(entry.Path);
            _waveOut.Init(_waveSource);
            PlayerSlider.Maximum = _waveSource.TotalTime.TotalMilliseconds;
            ControlPlayerSlider.Maximum = _waveSource.TotalTime.TotalMilliseconds;
            TotalTimeText.Text = Method.Value.MsToTime(_waveSource.TotalTime.TotalMilliseconds);
            BeginPlaying();
        }
        else
        {
            LoadingUi();
            var data =
                BitmapDataList.Find(UrlImageDataListEntry => UrlImageDataListEntry.Url == entry.Img);
            if (data == null)
            {
                var bitmap = await Method.Value.LoadImageFromUrlAsync(entry.Img!);
                if (bitmap != null) SongImg.Source = bitmap;

                BitmapDataList.Add(new UrlImageDataListEntry { Url = entry.Img, Bitmap = bitmap });
            }
            else
            {
                SongImg.Source = data.Bitmap;
            }

            try
            {
                var handler = new HttpClientHandler();
                handler.ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => true;
                using var client = new HttpClient(handler);
                var response = await client.GetAsync($"{Const.String.MusicApiUrl.TrimEnd('/')}/check/music?id={entry.SongId}");
                response.EnsureSuccessStatusCode();
                var jObject = JObject.Parse(await response.Content.ReadAsStringAsync());
                var availability = (bool)jObject["success"]!;
                if (!availability)
                {
                    Method.Ui.Toast(MainLang.MusicNotAvailable, type: NotificationType.Error);
                    return;
                }

                var response1 = await client.GetAsync($"{Const.String.MusicApiUrl.TrimEnd('/')}/song/url?id={entry.SongId}");
                response1.EnsureSuccessStatusCode();
                var jObject1 = JObject.Parse(await response1.Content.ReadAsStringAsync());
                if (jObject1 == null)
                {
                    Method.Ui.Toast(MainLang.MusicGetFail, type: NotificationType.Error);
                    return;
                }

                var url = (string)((JObject)((JArray)jObject1["data"])[0])["url"];
                LyricUi(entry);

                var request = (HttpWebRequest)WebRequest.Create(url);
                using (var response4 = (HttpWebResponse)request.GetResponse())
                using (var responseStream = response4.GetResponseStream())
                {
                    var memoryStream = new MemoryStream();
                    responseStream.CopyTo(memoryStream);
                    memoryStream.Position = 0;

                    _waveStream = new Mp3FileReader(memoryStream);

                    var selectedItem = PlayListView.SelectedItem as PlaySongListViewItemEntry;
                    if (selectedItem.SongName != entry.SongName || selectedItem.SongId != entry.SongId) return;

                    PlayerSlider.Maximum = _waveStream.TotalTime.TotalMilliseconds;
                    ControlPlayerSlider.Maximum = _waveStream.TotalTime.TotalMilliseconds;
                    TotalTimeText.Text = Method.Value.MsToTime(_waveStream.TotalTime.TotalMilliseconds);
                    if (_waveOut != null)
                    {
                        _waveOut.Stop();
                        _waveOut.Dispose();
                    }

                    _waveOut = new WaveOutEvent();
                    _waveOut.Volume = _volume;
                    _waveOut.PlaybackStopped += PlayerEnded;
                    _waveOut.Init(_waveStream);
                    BeginPlaying();
                }
            }
            catch (Exception e)
            {
                Const.Notification.main.Show(MainLang.LoadFail, NotificationType.Error);
            }
        }
    }

    private async void LyricUi(PlaySongListViewItemEntry entry)
    {
        using var client2 = new HttpClient();
        var res2 = string.Empty;
        try
        {
            var url2 = $"{Const.String.MusicApiUrl.TrimEnd('/')}/lyric?id={entry.SongId}";
            var response3 = await client2.GetAsync(url2);
            response3.EnsureSuccessStatusCode();
            res2 = await response3.Content.ReadAsStringAsync();
        }
        catch (Exception)
        {
        }

        if (!string.IsNullOrWhiteSpace(res2))
        {
            var obj2 = JsonConvert.DeserializeObject<LyricApi>(res2);
            var lyricData = obj2.lrc.lyric;

            lyrics = ParseLyrics(lyricData);

            lyricRuns = new List<TextBlock>();
            LyricBlock.Children.Clear();
            foreach (var lyric in lyrics)
            {
                var tra = new Transitions();
                var run = new TextBlock { Text = lyric.Text + "\n", Height = 22 };
                var milliseconds = (long)lyric.Time.TotalMilliseconds;
                run.Tag = milliseconds.ToString();
                run.HorizontalAlignment = HorizontalAlignment.Center;
                run.Transitions = tra;
                run.Transitions.Add(new DoubleTransition
                {
                    Duration = TimeSpan.FromMilliseconds(200),
                    Easing = new SineEaseInOut(),
                    Property = FontSizeProperty
                });
                run.Transitions.Add(new DoubleTransition
                {
                    Duration = TimeSpan.FromMilliseconds(200),
                    Easing = new SineEaseInOut(),
                    Property = OpacityProperty
                });

                run.VerticalAlignment = VerticalAlignment.Center;
                run.TextAlignment = TextAlignment.Center;
                run.Foreground = _solidColorBrush;
                run.PointerPressed += RunOnPointerPressed;
                LyricBlock.Children.Add(run);
                lyricRuns.Add(run);
            }

            if (timerForLyric != null) timerForLyric.Stop();

            timerForLyric = new DispatcherTimer();
            timerForLyric.Interval = TimeSpan.FromSeconds(0.2);
            timerForLyric.Tick += TimerForLyric_Tick;
            timerForLyric.Start();
        }
    }

    private async void RunOnPointerPressed(object? sender, PointerPressedEventArgs e)
    {
        await Dispatcher.UIThread.InvokeAsync(() =>
        {
            if (_selectedItem == null) return;
            if (_selectedItem.Type == PlaySongListViewItemEntryType.Local)
            {
                if (_waveSource == null) return;
                _waveSource.CurrentTime = TimeSpan.FromMilliseconds(Convert.ToInt64(((TextBlock)sender).Tag));
            }
            else
            {
                if (_waveStream == null) return;
                _waveStream.CurrentTime = TimeSpan.FromMilliseconds(Convert.ToInt64(((TextBlock)sender).Tag));
            }
        });
    }

    private async void TimerForLyric_Tick(object? sender, EventArgs e)
    {
        async void DefaultUi(TextBlock x)
        {
            x.FontSize = 14;
            x.Height = 22;
            x.Foreground = _solidColorBrush;
        }

        async void AccentUi(TextBlock x)
        {
            x.Foreground = new SolidColorBrush((Color)Application.Current.Resources["SystemAccentColor"]!);
            x.FontSize = 18;
            x.Height = 30;
        }

        if (PlayListView.SelectedIndex == -1) return;
        if (LyricBlock.Children.Count == 0) return;
        TimeSpan currentTime;
        try
        {
            currentTime = TimeSpan.FromMilliseconds(PlayerSlider.Value);
        }
        catch
        {
            return;
        }

        for (var i = 1; i < lyrics.Count; i++)
            if (lyrics[i].Time > currentTime)
            {
                if (i + 1 > LyricBlock.Children.Count) return;
                foreach (var x in lyricRuns)
                {
                    if (x == lyricRuns[i - 1]) continue;

                    DefaultUi(x);
                }

                AccentUi(lyricRuns[i - 1]);
                Const.Window.deskLyric.LyricText.Text = lyricRuns[i - 1].Text;

                await Task.Delay(210);
                var offset = lyricRuns[i - 1].Bounds.Top * -1;
                LyricBlock.Margin = new Thickness(0, offset, 0, 0);
                break;
            }
    }

    private void PlayerEnded(object? sender, StoppedEventArgs e)
    {
        if (Math.Abs(PlayerSlider.Maximum - PlayerSlider.Value) > 600) return;
        switch (_repeat)
        {
            case Repeat.RepeatAll when PlayListView.Items.Count == 1:
            case Repeat.RepeatOne:
            {
                if (_selectedItem == null) return;
                if (_selectedItem.Type == PlaySongListViewItemEntryType.Local)
                {
                    if (_waveSource == null) return;
                    _waveSource.Position = 0;
                    _waveSource.CurrentTime = TimeSpan.FromMilliseconds(0);
                    _waveOut.Init(_waveSource);
                    BeginPlaying();
                }
                else
                {
                    if (_waveStream == null) return;
                    _waveStream.Position = 0;
                    _waveStream.CurrentTime = TimeSpan.FromMilliseconds(0);
                    _waveOut.Init(_waveStream);
                    BeginPlaying();
                }

                PlayerSlider.Value = 0;
                CurrentTimeText.Text = Method.Value.MsToTime(0);
                break;
            }
            case Repeat.RepeatAll:
                NextSong();
                break;
        }
    }

    public List<Lyrics> ParseLyrics(string lyricsText)
    {
        var lines = lyricsText.Split('\n');
        var lyrics = new List<Lyrics>();
        for (var i = 0; i < lines.Length; i++)
        {
            var line = lines[i];
            var parts = line.Split(']');
            if (parts.Length < 2) continue;
            var timeText = parts[0].TrimStart('[');
            var time = ParseTime(timeText);
            var text = parts[1];
            if (!string.IsNullOrWhiteSpace(text)) lyrics.Add(new Lyrics { Time = time, Text = text, Index = i });
        }

        return lyrics;
    }

    private TimeSpan ParseTime(string timeText)
    {
        var parts = timeText.Split(':');
        var minutes = int.Parse(parts[0]);
        var secondsAndMilliseconds = parts[1].Split('.');
        var seconds = int.Parse(secondsAndMilliseconds[0]);
        var milliseconds = int.Parse(secondsAndMilliseconds[1]);
        return new TimeSpan(0, 0, minutes, seconds, milliseconds);
    }

    private void NextSong()
    {
        if (PlayListView.Items.Count <= 1) return;
        if (PlayListView.SelectedIndex == PlayListView.Items.Count - 1)
            PlayListView.SelectedIndex = 0;
        else
            PlayListView.SelectedIndex += 1;
    }

    private void PreviousSong()
    {
        if (PlayListView.Items.Count <= 1) return;
        if (PlayListView.SelectedIndex == 0)
            PlayListView.SelectedIndex = PlayListView.Items.Count - 1;
        else
            PlayListView.SelectedIndex -= 1;
    }
}